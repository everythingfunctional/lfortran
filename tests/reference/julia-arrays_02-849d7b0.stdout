module lfortran_intrinsic_builtin

function achar(i::Int32, kind::Int32)::String
    local achar::String = ""
    return achar
end

function allocated(x::Array{Int32, 1})::Bool
    local allocated::Bool = false
    return allocated
end

function any(mask::Array{Bool, 1}, dim::Int32)::Bool
    local r::Bool = false
    return r
end

function bit_size(x::Int32)::Int32
    local bit_size::Int32 = 0
    return bit_size
end

function command_argument_count()::Int32
    local r::Int32 = 0
    return r
end

function execute_command_line(command::String, wait::Bool, exitstat::Int32, cmdstat::Int32, cmdmsg::String) end

function get_command_argument(number::Int32, value::Base.RefValue{String}, length::Base.RefValue{Int32}, status::Base.RefValue{Int32}) end

function get_environment_variable(name::String, value::String, length::Int32, status::Int32, trim_name::Bool) end

function is_iostat_end(i::Int32)::Bool
    local r::Bool = false
    return r
end

function is_iostat_eor(i::Int32)::Bool
    local r::Bool = false
    return r
end

function lbound(x::Array{Int32, 1}, dim::Int32)::Int32
    local lbound::Int32 = 0
    return lbound
end

function max(a::Int32, b::Int32)::Int32
    local max::Int32 = 0
    return max
end

function maxval(x::Array{Int32, 1})::Int32
    local maxval::Int32 = 0
    return maxval
end

function min(a::Int32, b::Int32)::Int32
    local min::Int32 = 0
    return min
end

function minval(x::Array{Int32, 1})::Int32
    local minval::Int32 = 0
    return minval
end

function move_alloc(from::Base.RefValue{Int32}, to::Base.RefValue{Int32}) end

function real(x::Array{Int32, 1}, kind::Int32)::Float32
    local real::Float32 = 0.0
    return real
end

function reshape(x::Array{Int32, 1}, shape_vec::Array{Int32, 1})::Int32
    local r::Int32 = 0
    return r
end

function shape(x::Array{Int32, 1})::Int32
    local shape::Int32 = 0
    return shape
end

function sum(x::Array{Int32, 1})::Int32
    local sum::Int32 = 0
    return sum
end

function tiny(x::Array{Int32, 1})::Float32
    local tiny::Float32 = 0.0
    return tiny
end

function ubound(x::Array{Int32, 1}, dim::Int32)::Int32
    local ubound::Int32 = 0
    return ubound
end

end

module lfortran_intrinsic_kind

function dkind(x::Float64)::Int32
    local r::Int32 = 0
    r = 8
    return r
end

function kind(x::Bool)::Int32
    local r::Int32 = 0
    r = 4
    return r
end

function lkind(x::Bool)::Int32
    local r::Int32 = 0
    r = 4
    return r
end

function selected_char_kind(r::String)::Int32
    local res::Int32 = 0
    res = 1
    return res
end

function selected_int_kind(r::Int32)::Int32
    local res::Int32 = 0
    if r < 10
        res = 4
    else
        res = 8
    end
    return res
end

function selected_real_kind(p::Int32)::Int32
    local res::Int32 = 0
    if p < 7
        res = 4
    else
        res = 8
    end
    return res
end

function skind(x::Float32)::Int32
    local r::Int32 = 0
    r = 4
    return r
end

end

using Main.lfortran_intrinsic_builtin: sum
using Main.lfortran_intrinsic_kind: kind

function main()
    local a = Array{Float64, 1}(undef, 3)
    local b::Float64 = 0.0
    local dp::Int32 = kind(  0.00000000000000000e+00)
    a[1] =   3.00000000000000000e+00
    a[2] =   2.00000000000000000e+00
    a[3] =   1.00000000000000000e+00
    b = Float64(sum(a))
    if abs(b -   6.00000000000000000e+00) >   9.99999999999999980e-13
        println(Base.stderr, "ERROR STOP")
        exit(1)
    end
end

main()
